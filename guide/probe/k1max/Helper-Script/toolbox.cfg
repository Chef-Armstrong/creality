# K1-MAX
# Macro toolbox
# Author: Ales OMAHEN

[gcode_macro ANNOUNCE]
description: Display the provided text string on the display and write it to the log.
gcode:
  {% set msg = params.MSG|default(" ")|string  %}
  #M118 { msg }
  RESPOND TYPE=command MSG="{msg}"
  SET_DISPLAY_TEXT MSG="{msg}"

[gcode_macro INFO_Z_OFFSET]
gcode:
  {% set z_offset_eff = printer.configfile.config.probe.z_offset|float - printer.gcode_move.homing_origin.z|float %}
  RESPOND TYPE=command MSG=" Using Probe: '{printer.probe.name}'"
  RESPOND TYPE=command MSG="  z_offset:           {printer.configfile.config.probe.z_offset}"
  RESPOND TYPE=command MSG="  gcode_offset:       {printer.gcode_move.homing_origin.z}"
  RESPOND TYPE=command MSG="  effective z_offset: {z_offset_eff}"
  RESPOND TYPE=command MSG="Z-axis stepper:"
  RESPOND TYPE=command MSG="  endstop_pin:      {printer.configfile.config.stepper_z.endstop_pin}"
  RESPOND TYPE=command MSG="  position_endstop: {printer.configfile.config.stepper_z.position_endstop}"
  RESPOND TYPE=command MSG="  endstop_phase:    {printer.endstop_phase}"

[gcode_macro INFO_FAN]
gcode:
  RESPOND TYPE=command MSG="Fan state:"
  RESPOND TYPE=command MSG="  temperature_fan: {printer.temperature_fan}"
  RESPOND TYPE=command MSG="  fan:             {printer.fan}"

[gcode_macro INFO_PRINTER]
gcode:
  RESPOND TYPE=command MSG="Printer:"
  RESPOND TYPE=command MSG="  {printer}"

[gcode_macro WAIT_COOLDOWN]
gcode:
  RESPOND TYPE=command MSG="Waiting for extruder temp: 40C"
  UPDATE_DELAYED_GCODE ID=WAIT_COOLDOWN_TICK DURATION=1
  M106 P0 S204
  M106 P2 S204  # SET_PIN PIN=fan2 VALUE=255.00

[delayed_gcode WAIT_COOLDOWN_TICK]
gcode:
  {% set cur_temp = (((printer.extruder.temperature * 10.0)|round())/10.0) %}
  RESPOND TYPE=command MSG="Extruder temp: {cur_temp}C"
  {% if cur_temp|int < 40 %}
    _WAIT_COOLDOWN_END
  {% else %}
    UPDATE_DELAYED_GCODE ID=WAIT_COOLDOWN_TICK DURATION=5
  {% endif %}

[gcode_macro WAIT_COOLDOWN_CANCEL]
gcode:
  UPDATE_DELAYED_GCODE ID=WAIT_COOLDOWN_TICK DURATION=0   # If this command is executed manually this cancels any queued delayed call

[gcode_macro _WAIT_COOLDOWN_END]
gcode:
  RESPOND TYPE=command MSG="Extruder cooled down."
  UPDATE_DELAYED_GCODE ID=WAIT_COOLDOWN_TICK DURATION=0   # If this command is executed manually this cancels any queued delayed call
  ANNOUNCE MSG="Turning off fans..."
  RESPOND TYPE=command MSG="Turning off extruder fan..."
  M106 P0 S0
  RESPOND TYPE=command MSG="Turning off chamber extraction fan..."
  M107 P1           # case/chamber extraction fan
  RESPOND TYPE=command MSG="Turning off side fan..."
  M107 P2           # side fan
  # M106 P2 S0

# Since this code is asynchonous, it will not wait / block execution when called after . A callback is called after expiry.
[gcode_macro WAIT_BED_SETTLE_ASYNC]
description: Asynchronously wait for TIME minutes for the bed to thermally settle and after that duration call the provided callback gcode.
variable_wait_countdown: 0
variable_callback: " "
gcode:
  {% set timespan = 15 %}
  #{% set bed_temp = printer.custom_macro.default_bed_temp %}
  {% if 'TIME' in params|upper and (params.TIME|int) %}
    {% set timespan = params.TIME|int %}
  {% endif %}
  #{% if 'BED_TEMP' in params|upper and (params.BED_TEMP|float) %}
  #  {% set bed_temp = params.BED_TEMP|float %}
  #{% endif %}
  #{% set temp_rnd = (((bed_temp * 10.0)|round())/10.0) %}
  #ANNOUNCE MSG="Heating bed to {temp_rnd}C..."
  #M190 S{bed_temp}        # M190 sets bed temperature and waits. M140 just sets temp.
  {% set cbk = params.CALLBACK|default(" ")|string  %}
  RESPOND TYPE=command MSG="Callback: {cbk}"
  ANNOUNCE MSG="Async waiting {timespan} minutes for the bed to settle..."
  SET_GCODE_VARIABLE MACRO=WAIT_BED_SETTLE_ASYNC VARIABLE=wait_countdown VALUE={timespan}
  SET_GCODE_VARIABLE MACRO=WAIT_BED_SETTLE_ASYNC VARIABLE=callback VALUE='"{cbk}"'
  UPDATE_DELAYED_GCODE ID=WAIT_BED_SETTLE_TICK DURATION=3

[delayed_gcode WAIT_BED_SETTLE_TICK]
gcode:
  {% set wait_countdown = printer['gcode_macro WAIT_BED_SETTLE_ASYNC'].wait_countdown|int - 1%}
  SET_GCODE_VARIABLE MACRO=WAIT_BED_SETTLE_ASYNC VARIABLE=wait_countdown VALUE={wait_countdown}
  {% if wait_countdown <= 0 %}
    _WAIT_BED_SETTLE_DONE
  {% else %}
    ANNOUNCE MSG="Bed will settle in {wait_countdown} minutes..."
    UPDATE_DELAYED_GCODE ID=WAIT_BED_SETTLE_TICK DURATION=3
  {% endif %}


[gcode_macro WAIT_BED_SETTLE_CANCEL]
gcode:
  UPDATE_DELAYED_GCODE ID=WAIT_BED_SETTLE_TICK DURATION=0   # If this command is executed manually this cancels any queued delayed call

[gcode_macro _WAIT_BED_SETTLE_DONE]
gcode:
  UPDATE_DELAYED_GCODE ID=WAIT_BED_SETTLE_TICK DURATION=0   # If this command is executed manually this cancels any queued delayed call
  ANNOUNCE MSG="Bed settled."
  {% set callback = printer['gcode_macro WAIT_BED_SETTLE_ASYNC'].callback|string %}
  #RESPOND TYPE=command MSG="Callback: {callback}"
  {callback}

# A call to this function is synchronous - it can only be interrupted by an emergency stop...
# https://klipper.discourse.group/t/brainstorming-long-running-macros-and-urgent-commands-live-adjust-z-cancel-print/7464/16
[gcode_macro WAIT_BED_SETTLE]
description: Wait for TIME minutes for the bed to thermally settle.
gcode:
  {% set time = params.TIME|default(15)|int %}
  ANNOUNCE MSG="Waiting {time} minutes for the bed to settle..."
  # Unfortunately a gcode_macro cannot be interrupted - splitting into 1s waits doesn't give control of the command queue.
  G4 P60000     # Wait for 1 minute = 60 * 1000 ms for the print bed to settle
  {% for i in range(1, time)|reverse %}
    ANNOUNCE MSG="Bed will settle in {i} minutes..."
    G4 P60000     # Wait for 1 minute = 60 * 1000 ms for the print bed to settle
  {% endfor %}
  ANNOUNCE MSG="Bed settled."




[gcode_macro PRINT_DRAW_ONE_LINE]
description: Print a 0.3mm thick 180mm vertical line on the left edge of the build surface.
gcode:
  {% set start_x = params.X|default(-1.0)|float %}
  {% set start_y = params.Y|default(20.0)|float %}
  {% set len     = params.LEN|default(180.0)|float %}
  {% set end_x = end_x %}
  {% set end_y = start_y + len %}
  G90                             # use Absolute Positioning
  G1 Z2.0 F3000                   # Move Z-Axis up a little to prevent scratching of the build surface
  G1 X{start_x + 0.1} Y{start_y} Z0.3 F5000.0     # Move to start position
  G1 X{start_x + 0.1} Y{end_y} Z0.3 F1500.0 E15   # Draw the first line
  G1 X{start_x + 0.4} Y{end_y} Z0.3 F5000.0       # Move to the side a little
  G1 X{start_x + 0.4} Y{start_y} Z0.3 F1500.0 E30 # Draw the second line
  G92 E0                          # Reset Extruder
  G1 Z2.0 F3000                   # Move Z-Axis up a little to prevent scratching of the build surface
  G1 X5 Y20 Z0.3 F5000.0          # Move over to prevent blob squish
